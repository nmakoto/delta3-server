# common.pri
# vim:ft=qmake:fdm=marker:fmr=>>>,<<<:

# Default project variables ------------------------------------------------>>>1
isEmpty( GIT_ROOT ) {
    GIT_ROOT = $${PWD}
}
isEmpty( OPTIONS_HEADER_NAME ) {
    OPTIONS_HEADER_NAME = options.h
}
isEmpty( VERSION_HEADER_NAME ) {
    VERSION_HEADER_NAME = version.h
}
SOURCES_ROOT = $${PWD}
OPTIONS_HEADER = $${OUT_PWD}/$${OPTIONS_HEADER_NAME}
VERSION_HEADER = $${OUT_PWD}/$${VERSION_HEADER_NAME}
include( "$${SOURCES_ROOT}/options.pri" )
#---------------------------------------------------------------------------<<<1
# Get revision ------------------------------------------------------------->>>1
defineReplace( getRevision ) {
    revision_file = "$${OUT_PWD}/.revision"
    commands = \
        "echo \"Retriveing current revision...\";" \
        "mkdir $${OUT_PWD} 2> /dev/null;" \
        "git --work-tree=$${SOURCES_ROOT} --git-dir=$${GIT_ROOT}/.git \
            show --pretty=%h HEAD | head -n1 > $${revision_file}"

    QMAKE_EXTRA_TARGETS += uprevision
    PRE_TARGETDEPS += update_revision

    uprevision.target = update_revision
    uprevision.commands = "@$${commands}"

    export( uprevision.target )
    export( uprevision.commands )
    export( QMAKE_EXTRA_TARGETS )
    export( PRE_TARGETDEPS )

    revision = ""
    system( $${commands} ) {
        revision = $$cat( $${revision_file} )
    }
    return( $${revision} )
}
#---------------------------------------------------------------------------<<<1
# Create version header ---------------------------------------------------->>>1
defineTest( updateVersionHeader ) {
    version_file = $${VERSION_HEADER}
    version = $${VERSION}
    isEmpty( VERSION ) {
        version = "0.0.0"
    }

    unix {
        revision = $$getRevision()
    } else {
        revision = ""
    }

    commands = "@echo \"Generating version header...\";"
    commands += \
        "echo \"// version.h -- autogenerated version header\"" \
        " > $${version_file} &&"
    version_text = \
        "$${LITERAL_HASH}ifndef FILE__VERSION_H" \
        "$${LITERAL_HASH}define FILE__VERSION_H" \
        "$${LITERAL_HASH}define VERSION \\\"$${version}\\\""

    count( revision, 0 ) {
        version_text += \
            "$${LITERAL_HASH}define VERSION_REVISION \\\"$${revision}\\\"" \
            "$${LITERAL_HASH}define VERSION_STRING \\\"$${version}\\\""
    } else {
        version_text += \
            "$${LITERAL_HASH}define VERSION_STRING \
            \\\"$${version}-git-$${revision}\\\""
    }

    version_text += "$${LITERAL_HASH}endif"

    for( line, version_text ) {
        commands += "echo \"$${line}\" >> $${version_file} &&"
    }

    commands += "echo \"Version header completed\""

    QMAKE_EXTRA_TARGETS += upversion
    PRE_TARGETDEPS += update_version
    INCLUDEPATH *= $${OUT_PWD}

    upversion.target = update_version
    upversion.commands = $${commands}

    export( upversion.target )
    export( upversion.commands )
    export( QMAKE_EXTRA_TARGETS )
    export( PRE_TARGETDEPS )
    export( INCLUDEPATH )
}
#---------------------------------------------------------------------------<<<1
# Collect variables for options header ------------------------------------->>>1
defineReplace( getOptionsItems ) {
    options_file = $${SOURCES_ROOT}/options.pri
    vars = $$fromfile( $${options_file}, OPTIONS_VARS )
    for( var, vars ) {
        value = $$fromfile( $${options_file}, $${var} )
        isEmpty( $$find(var, "_INT$") ) {
            value = "\\\"$${value}\\\""
        }
        items += "$${LITERAL_HASH}define $${var} $${value}"
    }
    return( $${items} )
}
##--------------------------------------------------------------------------<<<1
## Create options header --------------------------------------------------->>>1
defineTest( generateOptionsHeader ) {
    options_file = $${OPTIONS_HEADER}

    items = \
        "$${LITERAL_HASH}ifndef FILE__OPTIONS_H" \
        "$${LITERAL_HASH}define FILE__OPTIONS_H" \
        $$getOptionsItems() \
        "$${LITERAL_HASH}endif"

    commands = "@echo \"Generating options header...\";"
    commands += \
        "echo \"// options.h -- autogenerated options header\"" \
        " > $${options_file} && "
    for( line, items ) {
        commands += "echo \"$${line}\" >> $${options_file} && "
    }
    commands += "echo \"Options header completed\""

    QMAKE_EXTRA_TARGETS += genoptions
    INCLUDEPATH *= $${OUT_PWD}

    genoptions.target = generate_options
    genoptions.commands = $${commands}

    export( genoptions.target )
    export( genoptions.commands )
    export( QMAKE_EXTRA_TARGETS )
    export( INCLUDEPATH )
}
##--------------------------------------------------------------------------<<<1
## Update options header --------------------------------------------------->>>1
defineTest( updateOptionsHeader ) {
    options_file = $${OPTIONS_HEADER}
    generateOptionsHeader()

    commands = "@echo \"Updating options header...\";"
    commands += "test -f \"$${options_file}\" || make generate_options;"

    QMAKE_EXTRA_TARGETS += upoptions
    PRE_TARGETDEPS += update_options
    INCLUDEPATH *= $${OUT_PWD}

    upoptions.target = update_options
    upoptions.commands = $${commands}

    export( upoptions.target )
    export( upoptions.commands )
    export( QMAKE_EXTRA_TARGETS )
    export( PRE_TARGETDEPS )
    export( INCLUDEPATH )
}
#---------------------------------------------------------------------------<<<1
